<html>
<head>
  <meta charset="UTF-8">
  <title>MoneyTrack - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <%= csrf_meta_tags %>
  <%= stylesheet_link_tag 'homestyle', media: 'all' %>
</head>
<body>
<header class="header">
  <div class="auth-buttons">
    <%= link_to "–í–æ–π—Ç–∏", login_path, class: "auth-button login-btn" %>
    <%= link_to "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", register_path, class: "auth-button register-btn" %>
  </div>
  <h1>MoneyTrack</h1>
  <p>–í–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</p>
</header>

<section class="finance-section">
  <div class="account-card">
    <h2>–ö–æ–ø–∏–ª–∫–∞</h2>
    <div class="account-info">
      <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å</p>
    </div>
    <%= link_to "–ù–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å", login_path, class: "account-button" %>
  </div>

  <div class="expense-tracker">
    <h2>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤</h2>
    <div class="expense-form">
      <input type="number" id="expense-amount" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞" min="0" step="0.01">
      <input type="text" id="expense-description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞">
      <button onclick="addExpense()">–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</button>
    </div>
    <canvas id="expense-chart"></canvas>
  </div>

  <div class="account-card">
    <h2>–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç</h2>
    <div class="balance">150,000 ‚ÇΩ</div>
    <div class="account-info">
      <p>–î–æ—Å—Ç—É–ø–Ω–æ: 145,000 ‚ÇΩ</p>
      <p>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 5,000 ‚ÇΩ</p>
    </div>
    <div class="account-info">
      <p>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</p>
      <p>–ü—Ä–æ–¥—É–∫—Ç—ã -2,500 ‚ÇΩ</p>
      <p>–ö–∞—Ñ–µ -800 ‚ÇΩ</p>
      <p>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç -100 ‚ÇΩ</p>
    </div>
    <%= link_to "–ü–æ–ø–æ–ª–Ω–∏—Ç—å", login_path, class: "account-button" %>
  </div>
</section>

<div class="container">
  <div class="card">
    <h2>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã</h2>
    <div class="advice-list">
      <% $arr_advices.each do |advice| %>
        <div class="tip">
          <h3>üí° –ü–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç</h3>
          <p><%= advice.content %></p>
        </div>
      <% end %>
    </div>
  </div>

  <div class="card">
    <h2>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç</h2>
    <div class="currency-item">
      <span>USD/RUB</span>
      <span > <%= $rates[:USD] %> </span>
    </div>
    <div class="currency-item">
      <span>EUR/USD</span>
      <span><%= $rates[:EUR] %></span>
    </div>
    <div class="currency-item">
      <span>CNY/USD</span>
      <span><%= $rates[:CNY] %></span>
    </div>
  </div>

  <div class="card">
    <h2>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏</h2>

    <div class="stock-list">

    </div>
  </div>
</div>

<footer class="footer">
  <div class="footer-content">
    <div class="footer-section">
      <h3>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
      <p>üìç –ú–æ—Å–∫–≤–∞, —É–ª. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è, 123</p>
      <p>üìû 8 (800) 123-45-67</p>
      <p>üìß support@moneytrack.ru</p>
    </div>
    <div class="footer-section">
      <h3>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h3>
      <p>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 20:00</p>
      <p>–°—É–±–±–æ—Ç–∞: 10:00 - 17:00</p>
      <p>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π</p>
    </div>
    <div class="footer-section">
      <h3>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</h3>
      <div class="social-links">
        <a href="https://vk.com/moneytrack">VK</a>
        <a href="https://t.me/moneytrack">Telegram</a>
        <a href="https://www.youtube.com/moneytrack">YouTube</a>
      </div>
    </div>
  </div>
  <div class="footer-bottom">
    <p>¬© 2024 MoneyTrack. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
  </div>
</footer>

<script>
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    function updateFinancialData() {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    }

    function highlightNewData(element) {
        element.classList.add('highlight');
        setTimeout(() => {
            element.classList.remove('highlight');
        }, 2000);
    }

    setInterval(updateFinancialData, 300000);

    document.querySelectorAll('.card').forEach(card => {
        card.addEventListener('click', function() {
            this.style.transform = 'scale(1.02)';
            setTimeout(() => {
                this.style.transform = 'scale(1)';
            }, 200);
        });
    });

    const tips = [
        "–í–µ–¥–∏—Ç–µ —É—á–µ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫-—Å–µ—Ä–≤–∏—Å—ã",
        "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ"
    ];

    function addNewTip() {
        const tipsContainer = document.querySelector('.card:first-child');
        const randomTip = tips[Math.floor(Math.random() * tips.length)];
        const tipElement = document.createElement('div');
        tipElement.className = 'tip';
        tipElement.innerHTML = `
            <h3>üí° –°–æ–≤–µ—Ç –¥–Ω—è</h3>
            <p>${randomTip}</p>
        `;
        tipsContainer.appendChild(tipElement);
        highlightNewData(tipElement);
    }

    setInterval(addNewTip, 3600000);

    let expenseChart;
    const expenses = {
        labels: [],
        data: []
    };

    function initChart() {
        const ctx = document.getElementById('expense-chart').getContext('2d');
        expenseChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: expenses.labels,
                datasets: [{
                    label: '–†–∞—Å—Ö–æ–¥—ã',
                    data: expenses.data,
                    borderColor: '#408945',
                    backgroundColor: 'rgba(64, 137, 69, 0.1)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: '–°—É–º–º–∞ (‚ÇΩ)'
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: '–í—Ä–µ–º—è'
                        }
                    }
                }
            }
        });
    }

    function addExpense() {
        const amount = parseFloat(document.getElementById('expense-amount').value);
        const description = document.getElementById('expense-description').value;

        if (amount && description) {
            const now = new Date();
            const timeLabel = `${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`;

            expenses.labels.push(timeLabel);
            expenses.data.push(amount);

            if (!expenseChart) {
                initChart();
            } else {
                expenseChart.data.labels = expenses.labels;
                expenseChart.data.datasets[0].data = expenses.data;
                expenseChart.update();
            }

            document.getElementById('expense-amount').value = '';
            document.getElementById('expense-description').value = '';
        }
    }

    document.addEventListener('DOMContentLoaded', initChart);

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.account-button').forEach(button => {
            button.addEventListener('click', function() {
                console.log('Button clicked:', this.textContent);
                this.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 200);
            });
        });
    });

    document.addEventListener('DOMContentLoaded', () => {
        const stockListContainer = document.querySelector('.stock-list'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π


        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ü–∏–π
        function loadStocks() {
            fetch('/stocks/data', {
                headers: {
                    'Accept': 'application/json',
                    'X-CSRF-Token': getCSRFToken()
                }
            })
              .then(response => {
                  if (!response.ok) {
                      throw new Error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
                  }
                  return response.json();
              })
              .then(data => {
                  renderStocks(data);
              })
              .catch(error => {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π:', error);
                  showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π.', 'error');
              });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∞–∫—Ü–∏–π –≤ DOM
        function renderStocks(stocks) {
            stockListContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫

            stocks.forEach(stock => {
                const stockItem = document.createElement('div');
                stockItem.classList.add('stock-item');

                // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞
                const tickerSpan = document.createElement('span');
                tickerSpan.textContent = stock.ticker;

                // –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—ã
                const priceSpan = document.createElement('span');
                priceSpan.textContent = `$${parseFloat(stock.price).toFixed(2)}`;

                // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                // if (window.userLoggedIn === 'true') {
                //     console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω');
                //     const favButton = document.createElement('button');
                //     favButton.classList.add('fav-btn');
                //     favButton.dataset.ticker = stock.ticker;
                //     favButton.textContent = '‚òÜ'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                // }


                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–∫—Ü–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞)

                // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ stock-item
                stockItem.appendChild(tickerSpan);
                stockItem.appendChild(priceSpan);
                //stockItem.appendChild(favButton);

                // –í—Å—Ç–∞–≤–ª—è–µ–º stock-item –≤ stock-list
                stockListContainer.appendChild(stockItem);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        function toggleFavorite(button, stockTicker, isActive) {
            if (!isActive) {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                addFavorite(button, stockTicker);
            } else {
                // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                removeFavorite(button, stockTicker);
            }
        }



        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF-—Ç–æ–∫–µ–Ω–∞
        function getCSRFToken() {
            const tokenElement = document.querySelector('meta[name="csrf-token"]');
            return tokenElement ? tokenElement.getAttribute('content') : '';
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        function showNotification(message, type = 'info') {
            alert(message);
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è localStorage
        function updateLocalStorage(stockTicker, action) {
            let favorites = JSON.parse(localStorage.getItem('favoriteStocks')) || [];

            if (action === 'add') {
                if (!favorites.includes(stockTicker)) {
                    favorites.push(stockTicker);
                }
            } else if (action === 'remove') {
                favorites = favorites.filter(stock => stock !== stockTicker);
            }

            localStorage.setItem('favoriteStocks', JSON.stringify(favorites));
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π –∏–∑ localStorage
        const currentFavorites = JSON.parse(localStorage.getItem('favoriteStocks')) || [];

        loadStocks()
    });

</script>
</body>
</html>
